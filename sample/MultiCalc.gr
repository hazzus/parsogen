{
package multicalc
import java.util.*
}

@tokens [

WS = "[ \t]+";
NL = "[\n\r]+";
VAR = "[a-zA-Z][a-zA-Z0-9_]*";
NUM = "[1-9][0-9]*";
ADD = "\\+";
SUB = "-";
MUL = "\\*";
DIV = "/";
LBR = "\\(";
RBR = "\\)";
SEP = ";";
ASG = "=";

]

@skip [WS; NL]

@rules [

Start(): MutableList<Pair<String,Int>>
    = AsgList({HashMap<String,Int>()}) { return $1 }
    ;

AsgList(map: MutableMap<String,Int>): MutableList<Pair<String,Int>>
    = VAR ASG S({map}) SEP AsgList({map.apply { put($1, $3) } })
    {
        val tail = $5
        tail.add(0, Pair($1, $3))
        return tail
    }
    | $ { return LinkedList<Pair<String, Int>>() }
    ;


S(map: MutableMap<String,Int>): Int
    = T({map}) X({map}, {$1}) { return $2 }
    ;

X(map: MutableMap<String,Int> , acc: Int): Int
    = ADD T({map}) X({map}, {acc + $2}) { return $3 }
    | SUB T({map}) X({map}, {acc - $2}) { return $3 }
    | $ { return acc }
    ;

T(map: MutableMap<String,Int>): Int
    = F({map}) Y({map}, {$1}) { return $2 }
    ;

Y(map: MutableMap<String,Int> , acc: Int): Int
    = MUL F({map}) Y({map}, {acc * $2}) { return $3 }
    | $ { return acc }
    ;

F(map: MutableMap<String,Int>): Int
    = SUB F({map}) { return -$2 }
    | NUM { return $1.toInt() }
    | LBR S({map}) RBR { return $2 }
    | VAR { return map[$1]!! }
    ;
]

@start = Start;